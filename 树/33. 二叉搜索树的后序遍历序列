## 题目描述
输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则返回true,否则返回false。假设输入的数组的任意两个数字都互不相同。

### 做题思路
- 由于是后序遍历，则序列中：最后一个数字是根节点，剩余的数字中，前一部分为左子树节点，后一部分为右子树节点。

```c++
class Solution {
public:
    bool VerifySquenceOfBST(vector<int> sequence) {
        int seq[sequence.size()];
        vector<int>::iterator begin = sequence.begin();
        vector<int>::iterator end = sequence.end();
        
        int i=0;
        for( ; begin != end; begin++)
        {
            seq[i] = sequence[i];
            i++;
        }
        
        return JudgeSequenceOfBST(seq, sequence.size());
    }
    
    bool JudgeSequenceOfBST(int sequence[], int length)
    {
        if( sequence == nullptr || length <=  0)
            return false;
        
        int rootValue = sequence[length-1];
        
        //二叉搜索树中，左子树的节点值都小于根节点的值
        int i = 0;
        for( ; i < length -1 ; i++)
        {
            if( sequence[i] > rootValue )
                break;
        }
        
        //二叉搜索树中，右子树的节点值都大于根节点的值
        int j = i;
        for( ; j<length -1 ; j++)
        {
            if( sequence[j] < rootValue)
                return false;
        }
        
        //判断左子树是否为二叉搜索树
        bool left = true;
        if(i>0)
        {
            left = JudgeSequenceOfBST(sequence,i);
        }
        
        //判断右子树是否为二叉搜索树
        bool right = true;
        if(i<length-1)
        {
             right = JudgeSequenceOfBST(sequence+i, length-i-1);
        }

        //返回左右子树的与值
        return (left&&right);
        }
};
```
